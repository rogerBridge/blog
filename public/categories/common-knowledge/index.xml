<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0">
    <channel>
        <title>Common Knowledge - 分类 - Not Bad ~~</title>
        <link>https://pub.fenr.men/categories/common-knowledge/</link>
        <description>Common Knowledge - 分类 - Not Bad ~~</description>
        <generator>Hugo -- gohugo.io</generator><language>zh-cn</language><lastBuildDate>Wed, 01 Jan 2020 10:09:49 &#43;0800</lastBuildDate><atom:link href="https://pub.fenr.men/categories/common-knowledge/" rel="self" type="application/rss+xml" /><item>
    <title>Common Knowledge</title>
    <link>https://pub.fenr.men/%E8%AF%AD%E8%A8%80%E5%9F%BA%E7%A1%80/</link>
    <pubDate>Wed, 01 Jan 2020 10:09:49 &#43;0800</pubDate>
    <author>gina</author>
    <guid>https://pub.fenr.men/%E8%AF%AD%E8%A8%80%E5%9F%BA%E7%A1%80/</guid>
    <description><![CDATA[<ul>
<li>
<p>什么是死锁?
线程 a 和线程 b 互相持有对方想要的资源, 双方都在等待对方释放资源, 僵持不下;
操作一个对象, 必须需要对象锁, 如果线程 a 拥有资源 A 的 🔓, 线程 b 拥有资源 B 的 🔓, 当同时, 线程 a 和线程 b 想要操作被对方占用了对象 🔓 的资源, 就必须等待对方, 到天长地久&hellip;</p>
</li>
<li>
<p>什么是乐观锁? 什么是悲观 🔓?
乐观锁: 每次拿到数据之后不会上锁, 但是会在更新的时候根据版本号的区别, 判断以下别人有没有更新这个数据; 数据的更新都是有版本号标记的, 如果一个数据被两个线程更新, 线程 a 拿到的时候, 版本号是 1, 它对数据进行操作后, 版本号+1, 成为 2, 线程 b 拿到的时候, 版本号是 2, 它对数据进行操作后, 版本号+1, 还是 2, 那么线程 b 的操作就会被舍弃&hellip;
悲观锁: 每次拿到数据之后都会上锁(对共享资源上锁), 这样被人想要拿数据的时候就必须等待, 直到他用完资源, 把锁空出来;</p>
</li>
<li>
<p>Go 中的多态和继承?</p>
<p><strong>多态:</strong> 父类 Animal 和子类: Dog, 两者共同拥有一个方法, run(), 如果有一个函数可以接收这个 Animal, 那么就可以接收 Dog, 这时它运行传入对象的 run 方法, 可能调用 Animal 的 run 方法, 也可能调用 Dog 的 run 方法, 这个就叫做多态;</p>
<p>Go 中多态的实现依赖 interface, 如果两个类都实现了 run 方法, 那么它们就实现了这个接口, 传入这个接口的函数就可以接收传入这两个类;</p>
<p><strong>继承:</strong> Go 中, 一个类要使用其他类的方法 <em>组合</em></p>
<p>Go 中的组合:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-go" data-lang="go"><span class="line"><span class="cl"><span class="kd">type</span> <span class="nx">Person</span> <span class="kd">struct</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="nx">Name</span> <span class="kt">string</span>
</span></span><span class="line"><span class="cl">    <span class="nx">Age</span>  <span class="kt">int</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="kd">func</span> <span class="p">(</span><span class="nx">p</span> <span class="o">*</span><span class="nx">Person</span><span class="p">)</span> <span class="nf">Laugh</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="nx">log</span><span class="p">.</span><span class="nf">Println</span><span class="p">(</span><span class="s">&#34;Hahahahaha :)&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="c1">// 如果Person和Children都有Laugh(), 那么c.Laugh() 会优先使用Child的Laugh
</span></span></span><span class="line"><span class="cl"><span class="c1">// 如果Children想要拿到Person的属性: Field, 那么就使用c.Person.Field
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="kd">type</span> <span class="nx">Children</span> <span class="kd">struct</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="o">*</span><span class="nx">Person</span>
</span></span><span class="line"><span class="cl">    <span class="nx">Height</span> <span class="kt">int</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="kd">func</span> <span class="nf">main</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="nx">c</span> <span class="o">:=</span> <span class="nx">Children</span><span class="p">{</span><span class="o">&amp;</span><span class="p">{</span><span class="nx">Name</span><span class="p">:</span> <span class="s">&#34;leo2n&#34;</span><span class="p">,</span> <span class="nx">Age</span><span class="p">:</span> <span class="mi">26</span><span class="p">},</span> <span class="mi">180</span><span class="p">}</span>
</span></span><span class="line"><span class="cl">    <span class="nx">c</span><span class="p">.</span><span class="nf">Langh</span><span class="p">()</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div></li>
</ul>]]></description>
</item>
</channel>
</rss>
